package com.example.eaternew;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import java.util.List;
import java.util.Optional;

/**
 * Main class of the project.
 * It glues together all of the adjacent
 * classes Map, Player, Food and etc.
 * All of the initialization and running steps
 * are performed in this class.
 * This is pivotal class of the project.
 */

public class Game extends Application {

    /**
     * Stores reference to the map of the game.
     */
    private Map map;
    /**
     * Stores reference to the player of the game.
     */
    private Player player;
    /**
     * Stores reference to the food generator of the game.
     */
    private Food food;

    /**
     * Default value of the file being loaded in case
     * it is not specified when running Game class instance
     * as a parameter.
     */
    private static String fileName = "map1_old.txt";

    /**
     * Java Fx Scene of the game application.
     */
    private Scene mainScene;

    /**
     * Reference to the Thread class which
     * sets score in the map during the game.
     */
    private Thread scoreThread;

    /**
     * Reference to the Thread class which
     * commands BotPlayer to eat find and eats
     * the food generated by Food class.
     */
    private Thread eaterThread;

    /**
     * Boolean value which indicates
     * if player or bot is playing
     * the game.
     */
    private boolean botIsPlaying = false;

    /**
     * Starting point of the Java Fx applications.
     * In this case initializes all of the components
     * of the game like Map, Player and Food classes.
     * Initializes two thread which properly sets scores
     * and runs the BotPlayer class.
     * @param primaryStage
     */
    @Override
    public void start(Stage primaryStage) {
        map = new Map(fileName);

        player = new MyBotPlayer(map);

        primaryStage.setTitle("Hungry Eater");
        mainScene = new Scene(map, map.getPrefWidth(), map.getPrefHeight());
        primaryStage.setScene(mainScene);
        primaryStage.setResizable(false);

        food = new Food(map, player);

        setMainSceneKeyListener();

        primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent event) {
                scoreThread.stop();
                eaterThread.stop();
            }
        });

        initializeScoreThread();

        showConfirmationAlert();

        initializeEaterThread();

        primaryStage.show();
        scoreThread.start();
        if(botIsPlaying){
            eaterThread.start();
        }
    }

    /**
     * Sets listener that performs proper changes on the player
     * position in the map depending on the events thrown or
     * performs nothing if the bot is playing.
     */
    private void setMainSceneKeyListener(){
        mainScene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                if(botIsPlaying)
                    return;
                if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.D)
                    player.moveRight();
                if (event.getCode() == KeyCode.LEFT || event.getCode() == KeyCode.A)
                    player.moveLeft();
                if (event.getCode() == KeyCode.UP || event.getCode() == KeyCode.W)
                    player.moveUp();
                if (event.getCode() == KeyCode.DOWN || event.getCode() == KeyCode.S)
                    player.moveDown();
            }
        });
    }

    /**
     * Initializes thread which sets score
     * each 0.5 seconds during gameplay.
     */
    private void initializeScoreThread(){
        scoreThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        scoreThread.sleep(500);
                        Platform.runLater(() -> {
                            map.setScore(food.getPoints());
                        });
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    /**
     * Initializes thread which commands BotPlayer, which implements both
     * Player and BotPlayer interfaces, to find, go by one of shortest paths
     * and eat food generated by Food class.
     */
    private void initializeEaterThread(){
        eaterThread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    if (food.getPosition() == null)
                        return;
                    if (!player.getPosition().equals(food.getPosition())) {
                        List<Position> pathToFood = ((BotPlayer) player).
                                getPathToTheFood(new Position(food.getPosition().getX(), food.getPosition().getY()));
                        for (int i = pathToFood.size() - 1; i >= 0; i--) {
                            try {
                                eaterThread.sleep(100);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            ((BotPlayer) player).setPosition(pathToFood.get(i).getX(), pathToFood.get(i).getY());
                            ((BotPlayer) player).setBallPosition();
                            try {
                                eaterThread.sleep(100);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    try {
                        eaterThread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    /**
     * Method which asks user to choose
     * to play him/her-self or let the bot
     * perform the playing.
     */
    private void showConfirmationAlert(){
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation of who will play");
        alert.setHeaderText("You want to see bot playing or play yourself?");
        alert.setContentText("Choose your option.");

        ButtonType buttonTypeYou = new ButtonType("You");
        ButtonType buttonTypeBot = new ButtonType("Bot");
        ButtonType buttonTypeCancel = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);

        alert.getButtonTypes().setAll(buttonTypeYou, buttonTypeBot, buttonTypeCancel);

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == buttonTypeYou){
            botIsPlaying = false;
        } else if (result.get() == buttonTypeBot) {
            botIsPlaying = true;
        } else {
            botIsPlaying = true;
        }
    }

    /**
     * Static main class which start the application.
     * With loading file name or setting it to the
     * default value.
     * @param args File position is passed as a first argument of the args array.
     */
    public static void main(String[] args) {
        if (args != null && args.length >= 1 && args[0].length() != 0)
            fileName = args[0] + "";
        launch(args);
    }
}